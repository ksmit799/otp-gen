template = """/**
 * THIS FILE WAS AUTOMATICALLY GENERATED BY OTP GEN
 * DO NOT MODIFY
 */
{imports}
export default interface IR{className}{extends} {{
{fields}
}}
"""


class RemoteInterfaceTS:
    def __init__(self, name, dclass, out_path):
        self.name = name
        self.dclass = dclass
        self.outPath = out_path
        self.outName = ""
        self.outBuffer = ""

        self._gen_buffer()

    def _gen_buffer(self):
        self.outName = f"IR{self.name}.ts"

        imports = ""
        extends = ""

        if self.dclass.get_num_parents():
            # This distributed class inherits from at least one parent.
            extends = " extends "
            for i in range(self.dclass.get_num_parents()):
                parent = self.dclass.get_parent(i)
                name = f"IR{parent.getName()}"  # Prepend with an 'IR'
                imports += f'import {name} from "./{name}";\n'
                extends += f"{name}, "

            # Chop off our last two chars (, )
            extends = extends[:-2]

        fields = ""
        for i in range(self.dclass.get_num_fields()):
            field = self.dclass.get_field(i)
            if not field.isClsend() and not field.isOwnsend():
                # Skip fields that aren't sendable.
                continue

            # TODO: Field args.
            fields += f"\t{field.getName()}(): void;\n"

        if fields:
            # Chop off our last char (\n)
            fields = fields[:-1]

        self.outBuffer = template.format(
            className=self.name, imports=imports, extends=extends, fields=fields
        )

    def write(self):
        if not self.outName or not self.outBuffer:
            return

        with open(self.outPath / self.outName, "w") as out_file:
            out_file.write(self.outBuffer)
