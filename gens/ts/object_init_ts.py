template = """/**
 * THIS FILE WAS AUTOMATICALLY GENERATED BY OTP GEN
 * DO NOT MODIFY
 */
import FunctionParsing from "./FunctionParsing";
 
export default class ObjectInitialization {{
"""


class ObjectInitTS:
    def __init__(self, dc_loader, out_path):
        self.dcLoader = dc_loader
        self.outPath = out_path
        self.outBuffer = ""

        self._gen_buffer()

    def _gen_buffer(self):
        self.outBuffer = template.format()

        for name, dc_class in self.dcLoader.dclasses_by_name.items():
            if dc_class.isStruct():
                continue

            self.outBuffer += f"\tpublic static init{name}(): void {{\n"

            for i in range(dc_class.get_num_parents()):
                parent = dc_class.get_parent(i)
                self.outBuffer += (
                    f"\t\tObjectInitialization.init{parent.getName()}();\n"
                )

            for i in range(dc_class.get_num_fields()):
                field = dc_class.get_field(i)
                if field.isRequired():
                    self.outBuffer += (
                        f"\t\tFunctionParsing.call_{name}_{field.getName()}();\n"
                    )

            self.outBuffer += "\t}\n\n"

        self.outBuffer += "\n}"

    def write(self):
        if not self.outBuffer:
            return

        with open(self.outPath / "ObjectInitialization.ts", "w") as out_file:
            out_file.write(self.outBuffer)
