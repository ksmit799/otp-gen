template = """/**
 * THIS FILE WAS AUTOMATICALLY GENERATED BY OTP GEN
 * DO NOT MODIFY
 */
import FunctionParsing from "./FunctionParsing";
import DatagramIterator from "../../otp/net/DatagramIterator";
{imports}
 
export default class ObjectInitialization {{
"""


class ObjectInitTS:
    def __init__(self, dc_loader, out_path):
        self.dcLoader = dc_loader
        self.outPath = out_path
        self.outBuffer = ""

        self._gen_buffer()

    def _gen_buffer(self):
        imports = ""
        static_out = ""

        for name, dc_class in self.dcLoader.dclasses_by_name.items():
            if dc_class.isStruct():
                continue

            imports += f'import I{name} from "../dc/I{name}";\n'
            static_out += f"\tpublic static init{name}(dc_interface: I{name}, di: DatagramIterator): void {{\n"

            for i in range(dc_class.get_num_parents()):
                parent = dc_class.get_parent(i)
                static_out += f"\t\tObjectInitialization.init{parent.getName()}(dc_interface, di);\n"

            for i in range(dc_class.get_num_fields()):
                field = dc_class.get_field(i)
                if field.isRequired():
                    static_out += f"\t\tFunctionParsing.call_{name}_{field.getName()}(dc_interface, di);\n"

            static_out += "\t}\n\n"

        if imports:
            # Trim off newline.
            imports = imports[:-1]

        self.outBuffer = template.format(imports=imports)
        self.outBuffer += static_out
        self.outBuffer += "\n}"

    def write(self):
        if not self.outBuffer:
            return

        with open(self.outPath / "ObjectInitialization.ts", "w") as out_file:
            out_file.write(self.outBuffer)
